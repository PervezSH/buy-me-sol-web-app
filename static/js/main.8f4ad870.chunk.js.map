{"version":3,"sources":["assets/user.svg","Regex.js","components/GetProvider/index.js","App.js","reportWebVitals.js","index.js"],"names":["validateAmount","RegExp","network","clusterApiUrl","opts","getProvider","connection","Connection","Provider","window","solana","SystemProgram","web3","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","Keypair","fromSecretKey","programID","PublicKey","idl","metadata","address","App","useState","walletAddress","setWalletAddress","exploring","setExploring","inputValue","setInputValue","nameInputValue","setNameInputValue","usernameInputValue","setUsernameInputValue","creatingCreator","setCreatingCreator","creatingSupporter","setCreatingSupporter","viewing","setViewing","creatorIndex","setCreatorIndex","msgInputValue","setMsgInputValue","amountInputValue","setAmountInputValue","buySolStatus","setBuySolStatus","creatorList","setCreatorList","supporterList","setSupporterList","messages","setMessages","userIndex","setUserIndex","hasSupporterAcc","setHasSuporterAcc","checkIfWalletIsConnected","a","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","createBaseAccount","provider","program","Program","rpc","initialize","accounts","user","wallet","systemProgram","programId","signers","getCreatorList","getSupporterList","getMessages","account","fetch","sendMessage","test","transaction","Transaction","add","transfer","fromPubkey","toPubkey","userAddress","lamports","feePayer","getRecentBlockhash","recentBlockhash","blockhash","signAndSendTransaction","signature","confirmTransaction","result","addMessage","sendCreator","length","usernameFromList","map","item","username","forEach","createCreator","sendSupporter","createSupporter","checkIfUserHasAccount","index","userExists","inCreator","filter","c","name","inSupporter","s","useEffect","onLoad","addEventListener","removeEventListener","className","onClick","onSubmit","event","preventDefault","JSON","stringify","includes","type","placeholder","value","onChange","e","target","renderSearchCreatorInputField","src","userLogo","alt","creatorAddress","supporterAddress","solAmount","message","renderAuthContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f4ad870.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/user.bc622e13.svg\";","export const validateAmount = new RegExp('^[0-9.]+$')","import { Provider } from '@project-serum/anchor';\r\nimport { Connection, clusterApiUrl } from '@solana/web3.js';\r\n\r\n// Set our network to devnet.\r\nconst network = clusterApiUrl('devnet');\r\n\r\n// Controls how we want to acknowledge when a transaction is \"done\".\r\nconst opts = {\r\n    preflightCommitment: \"processed\"\r\n  }\r\n\r\nexport function getProvider() {\r\n    const connection = new Connection(network, opts.preflightCommitment);\r\n    return new Provider(\r\n        connection, window.solana, opts.preflightCommitment\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport userLogo from './assets/user.svg';\r\nimport './App.css';\r\nimport idl from './idl.json';\r\nimport { Transaction, Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\r\nimport { Program, web3 } from '@project-serum/anchor';\r\nimport kp from './keypair.json'\r\nimport { validateAmount } from './Regex';\r\nimport { getProvider } from './components/GetProvider';\r\n\r\n// SystemProgram is a reference to the Solana runtime!\r\nconst { SystemProgram } = web3;\r\n\r\n// Create a keypair for the account that will hold the GIF data.\r\nconst arr = Object.values(kp._keypair.secretKey)\r\nconst secret = new Uint8Array(arr)\r\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\r\n\r\n// Get our program's id from the IDL file.\r\nconst programID = new PublicKey(idl.metadata.address);\r\n\r\n// Set our network to devnet.\r\nconst network = clusterApiUrl('devnet');\r\n\r\n// Controls how we want to acknowledge when a transaction is \"done\".\r\nconst opts = {\r\n  preflightCommitment: \"processed\"\r\n}\r\n\r\nconst App = () => {\r\n  // State\r\n  const [walletAddress, setWalletAddress] = useState(null);\r\n  const [exploring, setExploring] = useState(false);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [nameInputValue, setNameInputValue] = useState('');\r\n  const [usernameInputValue, setUsernameInputValue] = useState('');\r\n  const [creatingCreator, setCreatingCreator] = useState(false);\r\n  const [creatingSupporter, setCreatingSupporter] = useState(false);\r\n  const [viewing, setViewing] = useState(false);\r\n  const [creatorIndex, setCreatorIndex] = useState(0);\r\n  const [msgInputValue, setMsgInputValue] = useState('');\r\n  const [amountInputValue, setAmountInputValue] = useState(0);\r\n  const [buySolStatus, setBuySolStatus] = useState('');\r\n  \r\n  // States retrieved from solana program\r\n  const [creatorList, setCreatorList] = useState([]);\r\n  const [supporterList, setSupporterList] = useState([]);\r\n  const [messages, setMessages] = useState([]);\r\n  const [userIndex, setUserIndex] = useState(null);\r\n  const [hasSupporterAcc, setHasSuporterAcc] = useState(false);\r\n\r\n  // Check if Phantom wallet is connected or not\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      // First make sure we have access to window.solana\r\n      // MetaMask automatically injects an special object named solana\r\n      const { solana } = window;\r\n\r\n      if (solana.isPhantom) {\r\n        console.log('Phantom wallet found!');\r\n\r\n        // Connect the users wallet if we're authorized to acess user's wallet\r\n        const response = await solana.connect({ onlyIfTrusted: true });\r\n        console.log(\r\n          'Connected with Public Key:',\r\n          response.publicKey.toString()\r\n        );\r\n        setWalletAddress(response.publicKey.toString());\r\n      } else {\r\n        alert('Solana object not found! Get a Phantom Wallet 👻');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  // Connect to wallet\r\n  const connectWallet = async () => {\r\n    const { solana } = window;\r\n\r\n    if (solana) {\r\n      const response = await solana.connect();\r\n      console.log('Connected with Public Key:', response.publicKey.toString());\r\n      setWalletAddress(response.publicKey.toString());\r\n    }\r\n  };\r\n\r\n  // Initialize solana program\r\n  const createBaseAccount = async () => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      console.log(\"🚀 Starting....\")\r\n      await program.rpc.initialize({\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n          systemProgram: SystemProgram.programId,\r\n        },\r\n        signers: [baseAccount]\r\n      });\r\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\r\n      await getCreatorList();\r\n      await getSupporterList();\r\n      await getMessages();\r\n    } catch(error) {\r\n      console.log(\"Error creating BaseAccount account:\", error)\r\n    }\r\n  }\r\n\r\n  const getCreatorList = async() => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\r\n      \r\n      console.log(\"Got the account\", account)\r\n      setCreatorList(account.creatorList)\r\n    } catch (error) {\r\n      console.log(\"Error in getCreatorList : \", error)\r\n      setCreatorList(null)\r\n    }\r\n  }\r\n\r\n  // Get messages from the solana program\r\n  const getMessages = async() => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\r\n      \r\n      setMessages(account.messages)\r\n    } catch (error) {\r\n      console.log(\"Error in getting messages : \", error)\r\n    }\r\n  }\r\n\r\n  // Send message and solana to creator\r\n  const sendMessage = async () => {\r\n    if (!validateAmount.test(amountInputValue.toString())) {\r\n      alert(\"Not a valid amount 🙅\")\r\n      return\r\n    }\r\n    if (amountInputValue.toString() === '0') return\r\n    console.log(msgInputValue)\r\n    console.log(amountInputValue)\r\n\r\n    setBuySolStatus(\"sendingSol\")\r\n\r\n    try {\r\n      const connection = new Connection(network, opts.preflightCommitment);\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n\r\n      // Send Sol\r\n      const transaction = new Transaction().add(\r\n        SystemProgram.transfer({\r\n          fromPubkey: provider.wallet.publicKey,\r\n          toPubkey: creatorList[creatorIndex].userAddress,\r\n          lamports: 1000000000 * amountInputValue,\r\n        })\r\n      );\r\n\r\n      transaction.feePayer = provider.wallet.publicKey\r\n      console.log(\"Getting recent blockhash\")\r\n      transaction.recentBlockhash = (await connection.getRecentBlockhash()).blockhash\r\n\r\n      const { signature } = await window.solana.signAndSendTransaction(transaction);\r\n      const result = await connection.confirmTransaction(signature);\r\n\r\n      console.log(\"Transfered 🤗. Signature :\", signature)\r\n      console.log(\"Result :\", result)\r\n      alert(\"🥳 SOL sent successfully!\")\r\n\r\n      setBuySolStatus('sendingMsg')\r\n      \r\n      // Add message\r\n      await program.rpc.addMessage(creatorList[creatorIndex].userAddress, msgInputValue, amountInputValue.toString(),{\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n          systemProgram: SystemProgram.programId,\r\n        }\r\n      });\r\n\r\n      setMsgInputValue('')\r\n      setAmountInputValue('')\r\n\r\n      alert(\"🥳 Message sent successfully\")\r\n      setBuySolStatus('')\r\n\r\n      await getMessages()\r\n    } catch (error) {\r\n      setBuySolStatus('')\r\n      console.log(\"Error sending message: \",error)\r\n    }\r\n  }\r\n\r\n  // Call create creator account\r\n  const sendCreator = async () => {\r\n    if (usernameInputValue.length === 0) {\r\n      console.log(\"No username given!\")\r\n      return\r\n    }\r\n    if (nameInputValue.length === 0) {\r\n      console.log(\"No name given!\")\r\n      return\r\n    }\r\n    const usernameFromList = creatorList.map((item) => {\r\n      if (usernameInputValue === item.username.toString()) {\r\n        return item.username.toString()\r\n      }\r\n      return item.username.toString()\r\n    })\r\n    if (usernameInputValue.toString() === usernameFromList.toString()) {\r\n      alert(\"Username already taken 🤕\")\r\n      return\r\n    }\r\n\r\n    // Restricts user from creating a creator account if he/she already has one\r\n    creatorList.forEach((item) => {\r\n      if (walletAddress === item.userAddress.toString()) {\r\n        alert(\"You can only have one creator account!\")\r\n        return\r\n      }\r\n    });\r\n    \r\n    console.log('Name: ', nameInputValue, ' Username: ', usernameInputValue)\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n\r\n      await program.rpc.createCreator(usernameInputValue, nameInputValue, {\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n        }\r\n      });\r\n      setUsernameInputValue('')\r\n      setNameInputValue('')\r\n\r\n      alert(\"Successfully created creator account 🥳 \", nameInputValue, \" \", usernameInputValue)\r\n\r\n      await getCreatorList()\r\n    } catch (error) {\r\n      console.log(\"Error creating creator account: \",error)\r\n    }\r\n  }\r\n\r\n  // Retrieve supporters from solana program\r\n  const getSupporterList = async() => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\r\n      \r\n      console.log(\"Got the account\", account)\r\n      setSupporterList(account.supporterList)\r\n    } catch (error) {\r\n      console.log(\"Error in getSupporterList : \", error)\r\n      setSupporterList(null)\r\n    }\r\n  }\r\n\r\n  // Let user create a supporter account by calling create_supporter\r\n  const sendSupporter = async() => {\r\n    if (nameInputValue.length === 0) {\r\n      console.log(\"No name given!\")\r\n      return\r\n    }\r\n    console.log(nameInputValue)\r\n\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n\r\n      await program.rpc.createSupporter(nameInputValue, {\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n        }\r\n      });\r\n      setNameInputValue('')\r\n\r\n      alert(\"Successfully created supporter account 🥳 \", nameInputValue)\r\n\r\n      await getSupporterList()\r\n    } catch (error) {\r\n      console.log(\"Error creating supporter account: \",error)\r\n    }\r\n  }\r\n\r\n  // Search creator using search bar\r\n  const searchCreator = () => {\r\n    if (!walletAddress) {\r\n      connectWallet()\r\n      return\r\n    }\r\n    if (!creatorList) return\r\n\r\n    setInputValue('')\r\n\r\n    const stringifiedCreatorList = JSON.stringify(creatorList)\r\n\r\n    if(!stringifiedCreatorList.includes(inputValue)) {\r\n      alert(\"Username not found ☹️\")\r\n      return\r\n    }\r\n\r\n    creatorList.forEach((item, index) => {\r\n      if (inputValue === item.username.toString()) {\r\n        setViewing(true)\r\n        setCreatorIndex(index)\r\n      }\r\n    });\r\n  }\r\n\r\n  const checkIfUserHasAccount = () => {\r\n    // If user already has creator account, render creators home page and set user index\r\n    creatorList.forEach((item, index) => {\r\n      if (walletAddress === item.userAddress.toString()) {\r\n        setUserIndex(index)\r\n        setViewing(true)\r\n        setCreatorIndex(index)\r\n      }\r\n    });\r\n    // If user has supporter account, render auth accordinly\r\n    supporterList.forEach((item) => {\r\n      if (walletAddress === item.userAddress.toString()) setHasSuporterAcc(true)\r\n    });\r\n  }\r\n\r\n  // Checks if user has created an account\r\n  const userExists = ( userAddress ) => {\r\n    const inCreator = creatorList.filter((c) => c?.userAddress?.toString() === userAddress?.toString())\r\n    if (inCreator.length) return inCreator[0]?.name\r\n    const inSupporter = supporterList.filter((s) => s?.userAddress?.toString() === userAddress?.toString())\r\n    if (inSupporter.length) return inSupporter[0]?.name\r\n  }\r\n\r\n  useEffect(() => {\r\n    const onLoad = async () => {\r\n      await checkIfWalletIsConnected();\r\n    };\r\n    window.addEventListener('load', onLoad);\r\n    return () => window.removeEventListener('load', onLoad);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (walletAddress) {\r\n      console.log('Fetching creator list...');\r\n      getCreatorList()\r\n      console.log('Fetching supporter list...');\r\n      getSupporterList()\r\n      console.log('Fetching messages...');\r\n      getMessages()\r\n    }\r\n  },[walletAddress]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (creatorList) checkIfUserHasAccount()\r\n  }, [creatorList]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (supporterList) checkIfUserHasAccount()\r\n  }, [supporterList]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  // Render Connect Wallet Button\r\n  const renderConnectWalletButton = () => (\r\n    <button className=\"button gradient-button\" onClick={connectWallet}>\r\n      Connect Wallet\r\n    </button>\r\n  );\r\n\r\n  // If wallet is connect, render explore creator button\r\n  const renderExploreButton = () => (\r\n    <button className=\"button gradient-button\" onClick={() => {\r\n        setExploring(true)\r\n        setViewing(false)\r\n      }}>\r\n      Explore Creators\r\n    </button>\r\n  );\r\n\r\n  // If user don't have supporter account, render supporter button\r\n  const renderSupporterButton = () => (\r\n    <button className=\"button auth-button\" onClick={\r\n      () => {\r\n        if (!walletAddress) connectWallet()\r\n        setCreatingSupporter(true)\r\n      }\r\n    }>\r\n      Supporter\r\n    </button>\r\n  );\r\n\r\n  // Let user choose who he/she is, creator or supporter\r\n  const renderAuthContainer = () => {\r\n    if (userIndex) return\r\n    if (creatorList === null) {\r\n      return (\r\n        <button className=\"button auth-button\" onClick={() => {\r\n          createBaseAccount()\r\n        }}>\r\n          Do One-Time Initialization\r\n        </button>\r\n      )\r\n    } else {\r\n      return(\r\n        <div className=\"auth-container\">\r\n          <h1 className=\"main-text\">\r\n            {!hasSupporterAcc ? 'Who are you?' : 'Switch to Creator'}\r\n          </h1>\r\n          <div className=\"button-container\">\r\n            <button className=\"button auth-button\" onClick={\r\n              () => {\r\n                if (!walletAddress) connectWallet()\r\n                setCreatingCreator(true)\r\n              }\r\n            }>\r\n              Creator\r\n            </button>\r\n            {!hasSupporterAcc && renderSupporterButton()}\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  // If wallet not connect, display text\r\n  const renderIfWalletNotConnected = () => (\r\n    <h1 className=\"main-text\">\r\n      Give your audience<br></br>\r\n      <span className=\"gradient-text\">Solana</span> way<br></br>\r\n      to say thanks 🤗\r\n      <p className=\"sub-text\">\r\n        The fastest, easiest and decentralized way to say thanks.\r\n      </p>\r\n    </h1>\r\n  );\r\n\r\n  // Render creators list if user clicked explore creator button\r\n  const renderExploreCreatorContainer = () => (\r\n    <div className=\"creator-container\">\r\n      {creatorList.map((item, index) => (\r\n        <div className=\"list-item\" key={index} onClick={() => {\r\n          console.log(\"Viewing...\")\r\n          setViewing(true)\r\n          setCreatorIndex(index)\r\n        }}>\r\n          <img className=\"user-log\" src={userLogo} alt=\"User\"/>\r\n          <div className=\"name-container\">\r\n            <div>{item.name.toString()}</div>\r\n            <div className=\"name-container username\">{item.username.toString()}</div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n  \r\n  // Render this if user not creating account\r\n  const renderSearchCreatorInputField = () => {\r\n    if (creatorList !== null) {\r\n      return(\r\n        <form\r\n            onSubmit={(event) => {\r\n              event.preventDefault();\r\n              console.log(inputValue);\r\n              searchCreator()\r\n            }}\r\n        >\r\n          <input type=\"text\" placeholder=\"Search for creators\" value={inputValue} onChange={(e) => setInputValue(e.target.value)}/>\r\n        </form>\r\n      )\r\n    }\r\n  };\r\n\r\n  // Render creator form if user wants to create account as creator\r\n  const renderCreatorForm = () => (\r\n    <div className=\"form-container\">\r\n      <div className=\"main-text\">\r\n        Create Your Creator Account\r\n        <div className=\"form-if-title\">\r\n          Name\r\n          <input className=\"form-if\" placeholder=\"Enter your name\" value={nameInputValue} onChange={(e) => setNameInputValue(e.target.value)}/>\r\n        </div>\r\n        <div className=\"form-if-title\">\r\n          Username\r\n          <form\r\n            onSubmit={(event) => {\r\n              event.preventDefault()\r\n              sendCreator()\r\n            }}\r\n          >\r\n            <input className=\"form-if\" placeholder=\"Enter your username\" value={usernameInputValue} onChange={(e) => setUsernameInputValue(e.target.value)}/>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      <button className=\"button auth-button\" onClick={() => {\r\n        sendCreator()\r\n      }}>\r\n        Submit\r\n      </button>\r\n    </div>\r\n  );\r\n\r\n  // Render supporter form if user wants to create account as supporter\r\n  const renderSupporterForm = () => (\r\n    <div className=\"form-container\">\r\n      <div className=\"main-text\">\r\n        Create Your Creator Account\r\n        <div className=\"form-if-title\">\r\n          Name\r\n          <form\r\n            onSubmit={(event) => {\r\n              event.preventDefault()\r\n              sendSupporter()\r\n            }}\r\n          >\r\n            <input className=\"form-if\" placeholder=\"Enter your name\" value={nameInputValue} onChange={(e) => setNameInputValue(e.target.value)}/>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      <button className=\"button auth-button\" onClick={() => {\r\n        sendSupporter()\r\n      }}>\r\n        Submit\r\n      </button>\r\n    </div>\r\n  );\r\n\r\n  // Render buy container if supporters are viewing page\r\n  const renderBuyContainer = () => (\r\n    <div className=\"buy-container\">\r\n      <div className=\"bold-text\"> \r\n      Buy {creatorList[creatorIndex].name.toString()} some Sol\r\n      </div>\r\n      <div className=\"buy-section\">\r\n        <div className=\"normal-text\">Enter you message</div>\r\n        <input className=\"message-box\" placeholder=\"Say something  nice.....😎\" value={msgInputValue} onChange={(e) => setMsgInputValue(e.target.value)}/>\r\n        <div className=\"normal-text\">Enter amount</div>\r\n        <form\r\n            onSubmit={(event) => {\r\n              event.preventDefault()\r\n              // Send Message\r\n              sendMessage()\r\n            }}\r\n          >\r\n          <input className=\"message-box amount-box\" placeholder=\"0\" value={amountInputValue} onChange={(e) => setAmountInputValue(e.target.value)}/>\r\n        </form>\r\n            <div className=\"normal-text tiny-text\">You need to approve transection twice</div>\r\n      </div>\r\n      <button className=\"button auth-button\" onClick={\r\n        () => {\r\n          // Send Message\r\n          sendMessage()\r\n        }\r\n      }>\r\n        {buySolStatus === \"sendingSol\" ? 'Sending SOL...' : ''}\r\n        {buySolStatus === \"\" ? `Support ${amountInputValue} SOL` : ''}\r\n        {buySolStatus === \"sendingMsg\" ? 'Sending Msg...' : ''}\r\n      </button>\r\n    </div>\r\n  );\r\n\r\n  // Render creator page\r\n  const renderCreatorPage = () => (\r\n    <div className=\"main-container\">\r\n      <div className=\"profile-circle\">\r\n        <img className=\"user-log\" src={userLogo} alt=\"User\"/>\r\n      </div>\r\n      <div className=\"name-supporter-conatiner\">\r\n        <div className=\"cp-name-container\">\r\n          <div className=\"bold-text\">{creatorList[creatorIndex].name.toString()}</div>\r\n          <div className=\"normal-text\">{creatorList[creatorIndex].username.toString()}</div>\r\n        </div>\r\n        <div className=\"sub-text\">Hello 🤗<br/>\r\n        Here’s my recent supporters 😎\r\n        </div>\r\n        <div className=\"supporter-box\">\r\n          {messages.map((item, index) => (\r\n            (creatorList[creatorIndex].userAddress.toString() === item.creatorAddress.toString()) && (\r\n              <div className=\"list-item supporter-item\" key={index}>\r\n                <img className=\"user-log\" src={userLogo} alt=\"User\"/>\r\n                <div className=\"amount-message-container\">\r\n                  <div className=\"normal-text\">\r\n                    {userExists(item.supporterAddress) !== null ?\r\n                      `${userExists(item.supporterAddress)} bought ${item.solAmount.toString()} Sol`\r\n                      :\r\n                      `${item.supporterAddress.toString()} bought ${item.solAmount.toString()} Sol`\r\n                    }\r\n                  </div>\r\n                  <div className=\"message-container\">\r\n                    {item.message.toString()}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )\r\n          ))}\r\n        </div>\r\n      </div>\r\n      {(creatorList[creatorIndex].userAddress.toString() !== walletAddress) && renderBuyContainer()}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"header-container\">\r\n          <button className=\"logo-text\" onClick={\r\n            () => {\r\n              if (exploring) {\r\n                if (userIndex) {\r\n                  setCreatorIndex(userIndex)\r\n                  setViewing(true)\r\n                }\r\n                setExploring(false)\r\n              }\r\n              if (creatingCreator) setCreatingCreator(false)\r\n              if (creatingSupporter) setCreatingSupporter(false)\r\n              if (viewing) {\r\n                if (userIndex) setCreatorIndex(userIndex)\r\n                else setViewing (false)\r\n              }\r\n            }\r\n          }>\r\n            Buy Me Sol\r\n          </button>\r\n          {!walletAddress && renderConnectWalletButton()}\r\n          {!creatingCreator && !creatingSupporter && walletAddress  && renderExploreButton()}\r\n        </div>\r\n        <div className=\"body-container\">\r\n          {!viewing && !creatingCreator && !creatingSupporter && walletAddress && renderSearchCreatorInputField()}\r\n          {viewing && renderCreatorPage()}\r\n          <div className=\"main-container\">\r\n            {!walletAddress && renderIfWalletNotConnected()}\r\n            {!exploring && !creatingCreator && !creatingSupporter && renderAuthContainer()}\r\n            {!viewing && exploring && renderExploreCreatorContainer()}\r\n            {creatingCreator && walletAddress && renderCreatorForm()}\r\n            {creatingSupporter && walletAddress && renderSupporterForm()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}